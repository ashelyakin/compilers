// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  DESKTOP-P9G8U3P
// DateTime: 03.11.2019 14:12:41
// UserName: andre
// Input file <SimpleYacc.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace SimpleParser
{
public enum Tokens {
    error=1,EOF=2,BEGIN=3,END=4,CYCLE=5,INUM=6,
    RNUM=7,ID=8,ASSIGN=9,SEMICOLON=10,WHILE=11,DO=12,
    REPEAT=13,UNTIL=14,FOR=15,TO=16,IF=17,THEN=18,
    ELSE=19,WRITE=20,LEFTBRACKET=21,RIGHTBRACKET=22,VAR=23,COMMA=24,
    MINUS=25,PLUS=26,DIVISION=27,MULT=28};

// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<int,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class Parser: ShiftReduceParser<int, LexLocation>
{
  // Verbatim content from SimpleYacc.y
// Ёти объ€влени€ добавл€ютс€ в класс GPPGParser, представл€ющий собой парсер, генерируемый системой gppg
    public Parser(AbstractScanner<int, LexLocation> scanner) : base(scanner) { }
  // End verbatim content from SimpleYacc.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[36];
  private static State[] states = new State[70];
  private static string[] nonTerms = new string[] {
      "progr", "$accept", "block", "stlist", "statement", "assign", "cycle", 
      "while", "repeat", "for", "if", "write", "var", "ident", "expr", "list_ident", 
      "T", "F", };

  static Parser() {
    states[0] = new State(new int[]{3,4},new int[]{-1,1,-3,3});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{8,18,3,4,5,31,11,35,13,40,15,46,17,53,20,60,23,65},new int[]{-4,5,-5,44,-6,9,-14,10,-3,29,-7,30,-8,34,-9,39,-10,45,-11,52,-12,59,-13,64});
    states[5] = new State(new int[]{4,6,10,7});
    states[6] = new State(-16);
    states[7] = new State(new int[]{8,18,3,4,5,31,11,35,13,40,15,46,17,53,20,60,23,65},new int[]{-5,8,-6,9,-14,10,-3,29,-7,30,-8,34,-9,39,-10,45,-11,52,-12,59,-13,64});
    states[8] = new State(-4);
    states[9] = new State(-5);
    states[10] = new State(new int[]{9,11});
    states[11] = new State(new int[]{8,18,6,19,21,20},new int[]{-15,12,-17,28,-18,27,-14,17});
    states[12] = new State(new int[]{26,13,25,23,4,-15,10,-15,14,-15,19,-15,16,-15});
    states[13] = new State(new int[]{8,18,6,19,21,20},new int[]{-17,14,-18,27,-14,17});
    states[14] = new State(new int[]{28,15,27,25,26,-28,25,-28,4,-28,10,-28,14,-28,19,-28,16,-28,22,-28,8,-28,3,-28,5,-28,11,-28,13,-28,15,-28,17,-28,20,-28,23,-28,12,-28,18,-28});
    states[15] = new State(new int[]{8,18,6,19,21,20},new int[]{-18,16,-14,17});
    states[16] = new State(-31);
    states[17] = new State(-33);
    states[18] = new State(-14);
    states[19] = new State(-34);
    states[20] = new State(new int[]{8,18,6,19,21,20},new int[]{-15,21,-17,28,-18,27,-14,17});
    states[21] = new State(new int[]{22,22,26,13,25,23});
    states[22] = new State(-35);
    states[23] = new State(new int[]{8,18,6,19,21,20},new int[]{-17,24,-18,27,-14,17});
    states[24] = new State(new int[]{28,15,27,25,26,-29,25,-29,4,-29,10,-29,14,-29,19,-29,16,-29,22,-29,8,-29,3,-29,5,-29,11,-29,13,-29,15,-29,17,-29,20,-29,23,-29,12,-29,18,-29});
    states[25] = new State(new int[]{8,18,6,19,21,20},new int[]{-18,26,-14,17});
    states[26] = new State(-32);
    states[27] = new State(-30);
    states[28] = new State(new int[]{28,15,27,25,26,-27,25,-27,4,-27,10,-27,14,-27,19,-27,16,-27,22,-27,8,-27,3,-27,5,-27,11,-27,13,-27,15,-27,17,-27,20,-27,23,-27,12,-27,18,-27});
    states[29] = new State(-6);
    states[30] = new State(-7);
    states[31] = new State(new int[]{8,18,6,19,21,20},new int[]{-15,32,-17,28,-18,27,-14,17});
    states[32] = new State(new int[]{26,13,25,23,8,18,3,4,5,31,11,35,13,40,15,46,17,53,20,60,23,65},new int[]{-5,33,-6,9,-14,10,-3,29,-7,30,-8,34,-9,39,-10,45,-11,52,-12,59,-13,64});
    states[33] = new State(-17);
    states[34] = new State(-8);
    states[35] = new State(new int[]{8,18,6,19,21,20},new int[]{-15,36,-17,28,-18,27,-14,17});
    states[36] = new State(new int[]{12,37,26,13,25,23});
    states[37] = new State(new int[]{8,18,3,4,5,31,11,35,13,40,15,46,17,53,20,60,23,65},new int[]{-5,38,-6,9,-14,10,-3,29,-7,30,-8,34,-9,39,-10,45,-11,52,-12,59,-13,64});
    states[38] = new State(-18);
    states[39] = new State(-9);
    states[40] = new State(new int[]{8,18,3,4,5,31,11,35,13,40,15,46,17,53,20,60,23,65},new int[]{-4,41,-5,44,-6,9,-14,10,-3,29,-7,30,-8,34,-9,39,-10,45,-11,52,-12,59,-13,64});
    states[41] = new State(new int[]{14,42,10,7});
    states[42] = new State(new int[]{8,18,6,19,21,20},new int[]{-15,43,-17,28,-18,27,-14,17});
    states[43] = new State(new int[]{26,13,25,23,4,-19,10,-19,14,-19,19,-19});
    states[44] = new State(-3);
    states[45] = new State(-10);
    states[46] = new State(new int[]{8,18},new int[]{-6,47,-14,10});
    states[47] = new State(new int[]{16,48});
    states[48] = new State(new int[]{8,18,6,19,21,20},new int[]{-15,49,-17,28,-18,27,-14,17});
    states[49] = new State(new int[]{12,50,26,13,25,23});
    states[50] = new State(new int[]{8,18,3,4,5,31,11,35,13,40,15,46,17,53,20,60,23,65},new int[]{-5,51,-6,9,-14,10,-3,29,-7,30,-8,34,-9,39,-10,45,-11,52,-12,59,-13,64});
    states[51] = new State(-20);
    states[52] = new State(-11);
    states[53] = new State(new int[]{8,18,6,19,21,20},new int[]{-15,54,-17,28,-18,27,-14,17});
    states[54] = new State(new int[]{18,55,26,13,25,23});
    states[55] = new State(new int[]{8,18,3,4,5,31,11,35,13,40,15,46,17,53,20,60,23,65},new int[]{-5,56,-6,9,-14,10,-3,29,-7,30,-8,34,-9,39,-10,45,-11,52,-12,59,-13,64});
    states[56] = new State(new int[]{19,57,4,-21,10,-21,14,-21});
    states[57] = new State(new int[]{8,18,3,4,5,31,11,35,13,40,15,46,17,53,20,60,23,65},new int[]{-5,58,-6,9,-14,10,-3,29,-7,30,-8,34,-9,39,-10,45,-11,52,-12,59,-13,64});
    states[58] = new State(-22);
    states[59] = new State(-12);
    states[60] = new State(new int[]{21,61});
    states[61] = new State(new int[]{8,18,6,19,21,20},new int[]{-15,62,-17,28,-18,27,-14,17});
    states[62] = new State(new int[]{22,63,26,13,25,23});
    states[63] = new State(-23);
    states[64] = new State(-13);
    states[65] = new State(new int[]{8,18},new int[]{-16,66,-14,67});
    states[66] = new State(-26);
    states[67] = new State(new int[]{24,68,4,-25,10,-25,14,-25,19,-25});
    states[68] = new State(new int[]{8,18},new int[]{-16,69,-14,67});
    states[69] = new State(-24);

    rules[1] = new Rule(-2, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-4, new int[]{-5});
    rules[4] = new Rule(-4, new int[]{-4,10,-5});
    rules[5] = new Rule(-5, new int[]{-6});
    rules[6] = new Rule(-5, new int[]{-3});
    rules[7] = new Rule(-5, new int[]{-7});
    rules[8] = new Rule(-5, new int[]{-8});
    rules[9] = new Rule(-5, new int[]{-9});
    rules[10] = new Rule(-5, new int[]{-10});
    rules[11] = new Rule(-5, new int[]{-11});
    rules[12] = new Rule(-5, new int[]{-12});
    rules[13] = new Rule(-5, new int[]{-13});
    rules[14] = new Rule(-14, new int[]{8});
    rules[15] = new Rule(-6, new int[]{-14,9,-15});
    rules[16] = new Rule(-3, new int[]{3,-4,4});
    rules[17] = new Rule(-7, new int[]{5,-15,-5});
    rules[18] = new Rule(-8, new int[]{11,-15,12,-5});
    rules[19] = new Rule(-9, new int[]{13,-4,14,-15});
    rules[20] = new Rule(-10, new int[]{15,-6,16,-15,12,-5});
    rules[21] = new Rule(-11, new int[]{17,-15,18,-5});
    rules[22] = new Rule(-11, new int[]{17,-15,18,-5,19,-5});
    rules[23] = new Rule(-12, new int[]{20,21,-15,22});
    rules[24] = new Rule(-16, new int[]{-14,24,-16});
    rules[25] = new Rule(-16, new int[]{-14});
    rules[26] = new Rule(-13, new int[]{23,-16});
    rules[27] = new Rule(-15, new int[]{-17});
    rules[28] = new Rule(-15, new int[]{-15,26,-17});
    rules[29] = new Rule(-15, new int[]{-15,25,-17});
    rules[30] = new Rule(-17, new int[]{-18});
    rules[31] = new Rule(-17, new int[]{-17,28,-18});
    rules[32] = new Rule(-17, new int[]{-17,27,-18});
    rules[33] = new Rule(-18, new int[]{-14});
    rules[34] = new Rule(-18, new int[]{6});
    rules[35] = new Rule(-18, new int[]{21,-15,22});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
